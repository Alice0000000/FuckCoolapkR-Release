// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
internal class `-FieldMeta` : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : `-FieldMeta` {
        __init(_i, _bb)
        return this
    }
    val id : UInt
        get() {
            val o = __offset(4)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateId(id: UInt) : Boolean {
        val o = __offset(4)
        return if (o != 0) {
            bb.putInt(o + bb_pos, id.toInt())
            true
        } else {
            false
        }
    }
    val dexId : UInt
        get() {
            val o = __offset(6)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateDexId(dexId: UInt) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.putInt(o + bb_pos, dexId.toInt())
            true
        } else {
            false
        }
    }
    val classId : UInt
        get() {
            val o = __offset(8)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateClassId(classId: UInt) : Boolean {
        val o = __offset(8)
        return if (o != 0) {
            bb.putInt(o + bb_pos, classId.toInt())
            true
        } else {
            false
        }
    }
    val accessFlags : UInt
        get() {
            val o = __offset(10)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateAccessFlags(accessFlags: UInt) : Boolean {
        val o = __offset(10)
        return if (o != 0) {
            bb.putInt(o + bb_pos, accessFlags.toInt())
            true
        } else {
            false
        }
    }
    val dexDescriptor : String?
        get() {
            val o = __offset(12)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val dexDescriptorAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(12, 1)
    fun dexDescriptorInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 12, 1)
    val typeId : UInt
        get() {
            val o = __offset(14)
            return if(o != 0) bb.getInt(o + bb_pos).toUInt() else 0u
        }
    fun mutateTypeId(typeId: UInt) : Boolean {
        val o = __offset(14)
        return if (o != 0) {
            bb.putInt(o + bb_pos, typeId.toInt())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsFieldMeta(_bb: ByteBuffer): `-FieldMeta` = getRootAsFieldMeta(_bb, `-FieldMeta`())
        fun getRootAsFieldMeta(_bb: ByteBuffer, obj: `-FieldMeta`): `-FieldMeta` {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createFieldMeta(builder: FlatBufferBuilder, id: UInt, dexId: UInt, classId: UInt, accessFlags: UInt, dexDescriptorOffset: Int, typeId: UInt) : Int {
            builder.startTable(6)
            addTypeId(builder, typeId)
            addDexDescriptor(builder, dexDescriptorOffset)
            addAccessFlags(builder, accessFlags)
            addClassId(builder, classId)
            addDexId(builder, dexId)
            addId(builder, id)
            return endFieldMeta(builder)
        }
        fun startFieldMeta(builder: FlatBufferBuilder) = builder.startTable(6)
        fun addId(builder: FlatBufferBuilder, id: UInt) = builder.addInt(0, id.toInt(), 0)
        fun addDexId(builder: FlatBufferBuilder, dexId: UInt) = builder.addInt(1, dexId.toInt(), 0)
        fun addClassId(builder: FlatBufferBuilder, classId: UInt) = builder.addInt(2, classId.toInt(), 0)
        fun addAccessFlags(builder: FlatBufferBuilder, accessFlags: UInt) = builder.addInt(3, accessFlags.toInt(), 0)
        fun addDexDescriptor(builder: FlatBufferBuilder, dexDescriptor: Int) = builder.addOffset(4, dexDescriptor, 0)
        fun addTypeId(builder: FlatBufferBuilder, typeId: UInt) = builder.addInt(5, typeId.toInt(), 0)
        fun endFieldMeta(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}