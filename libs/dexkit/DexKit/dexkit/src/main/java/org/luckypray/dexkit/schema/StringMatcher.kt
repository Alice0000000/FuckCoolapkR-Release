// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
internal class `-StringMatcher` : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : `-StringMatcher` {
        __init(_i, _bb)
        return this
    }
    val value : String?
        get() {
            val o = __offset(4)
            return if (o != 0) {
                __string(o + bb_pos)
            } else {
                null
            }
        }
    val valueAsByteBuffer : ByteBuffer get() = __vector_as_bytebuffer(4, 1)
    fun valueInByteBuffer(_bb: ByteBuffer) : ByteBuffer = __vector_in_bytebuffer(_bb, 4, 1)
    val matchType : Byte
        get() {
            val o = __offset(6)
            return if(o != 0) bb.get(o + bb_pos) else 0
        }
    fun mutateMatchType(matchType: Byte) : Boolean {
        val o = __offset(6)
        return if (o != 0) {
            bb.put(o + bb_pos, matchType)
            true
        } else {
            false
        }
    }
    val ignoreCase : Boolean
        get() {
            val o = __offset(8)
            return if(o != 0) 0.toByte() != bb.get(o + bb_pos) else false
        }
    fun mutateIgnoreCase(ignoreCase: Boolean) : Boolean {
        val o = __offset(8)
        return if (o != 0) {
            bb.put(o + bb_pos, (if(ignoreCase) 1 else 0).toByte())
            true
        } else {
            false
        }
    }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsStringMatcher(_bb: ByteBuffer): `-StringMatcher` = getRootAsStringMatcher(_bb, `-StringMatcher`())
        fun getRootAsStringMatcher(_bb: ByteBuffer, obj: `-StringMatcher`): `-StringMatcher` {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createStringMatcher(builder: FlatBufferBuilder, valueOffset: Int, matchType: Byte, ignoreCase: Boolean) : Int {
            builder.startTable(3)
            addValue(builder, valueOffset)
            addIgnoreCase(builder, ignoreCase)
            addMatchType(builder, matchType)
            return endStringMatcher(builder)
        }
        fun startStringMatcher(builder: FlatBufferBuilder) = builder.startTable(3)
        fun addValue(builder: FlatBufferBuilder, value: Int) = builder.addOffset(0, value, 0)
        fun addMatchType(builder: FlatBufferBuilder, matchType: Byte) = builder.addByte(1, matchType, 0)
        fun addIgnoreCase(builder: FlatBufferBuilder, ignoreCase: Boolean) = builder.addBoolean(2, ignoreCase, false)
        fun endStringMatcher(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}