// automatically generated by the FlatBuffers compiler, do not modify

package org.luckypray.dexkit.schema

import com.google.flatbuffers.BaseVector
import com.google.flatbuffers.BooleanVector
import com.google.flatbuffers.ByteVector
import com.google.flatbuffers.Constants
import com.google.flatbuffers.DoubleVector
import com.google.flatbuffers.FlatBufferBuilder
import com.google.flatbuffers.FloatVector
import com.google.flatbuffers.LongVector
import com.google.flatbuffers.StringVector
import com.google.flatbuffers.Struct
import com.google.flatbuffers.Table
import com.google.flatbuffers.UnionVector
import java.nio.ByteBuffer
import java.nio.ByteOrder
import kotlin.math.sign

@Suppress("unused")
internal class `-ClassMetaArrayHolder` : Table() {

    fun __init(_i: Int, _bb: ByteBuffer)  {
        __reset(_i, _bb)
    }
    fun __assign(_i: Int, _bb: ByteBuffer) : `-ClassMetaArrayHolder` {
        __init(_i, _bb)
        return this
    }
    fun classes(j: Int) : `-ClassMeta`? = classes(`-ClassMeta`(), j)
    fun classes(obj: `-ClassMeta`, j: Int) : `-ClassMeta`? {
        val o = __offset(4)
        return if (o != 0) {
            obj.__assign(__indirect(__vector(o) + j * 4), bb)
        } else {
            null
        }
    }
    val classesLength : Int
        get() {
            val o = __offset(4); return if (o != 0) __vector_len(o) else 0
        }
    companion object {
        fun validateVersion() = Constants.FLATBUFFERS_23_5_26()
        fun getRootAsClassMetaArrayHolder(_bb: ByteBuffer): `-ClassMetaArrayHolder` = getRootAsClassMetaArrayHolder(_bb, `-ClassMetaArrayHolder`())
        fun getRootAsClassMetaArrayHolder(_bb: ByteBuffer, obj: `-ClassMetaArrayHolder`): `-ClassMetaArrayHolder` {
            _bb.order(ByteOrder.LITTLE_ENDIAN)
            return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(), _bb))
        }
        fun createClassMetaArrayHolder(builder: FlatBufferBuilder, classesOffset: Int) : Int {
            builder.startTable(1)
            addClasses(builder, classesOffset)
            return endClassMetaArrayHolder(builder)
        }
        fun startClassMetaArrayHolder(builder: FlatBufferBuilder) = builder.startTable(1)
        fun addClasses(builder: FlatBufferBuilder, classes: Int) = builder.addOffset(0, classes, 0)
        fun createClassesVector(builder: FlatBufferBuilder, data: IntArray) : Int {
            builder.startVector(4, data.size, 4)
            for (i in data.size - 1 downTo 0) {
                builder.addOffset(data[i])
            }
            return builder.endVector()
        }
        fun startClassesVector(builder: FlatBufferBuilder, numElems: Int) = builder.startVector(4, numElems, 4)
        fun endClassMetaArrayHolder(builder: FlatBufferBuilder) : Int {
            val o = builder.endTable()
            return o
        }
    }
}